Упражнения по ШИМ (PWM) для Arduino Uno

Упражнение 1: Регулятор яркости светодиода с кнопочным переключателем режимов
Аппаратная часть:

Подключите светодиод к ШИМ-пину 3 (анод к пину 3, катод к GND через резистор 220Ω).
Подключите кнопку к цифровому пину 4 (один контакт к пину 4, другой к GND; используйте встроенный подтягивающий резистор).

Задача:
Напишите программу с двумя режимами: Режим затухания и Статический режим. В Режиме затухания используйте цикл for для постепенного увеличения яркости светодиода от 0 до 255 (шаг 5), затем уменьшения до 0, повторяя это в цикле while с задержкой 50мс на шаг для создания плавного эффекта затухания. В Статическом режиме установите фиксированную яркость 128.
Используйте if-else для обнаружения нажатий кнопки (с защитой от дребезга: задержка 50мс) в void loop() для переключения режимов. Если кнопку удерживать более 2 секунд (отслеживание с помощью millis()), сбросьте в Режим затухания и трижды мигните светодиодом на полной яркости (255) с помощью цикла for.
Выводите текущий режим ("Затухание" или "Статический") через Serial.println().
Фокус программирования:

Цикл for для плавного PWM-затухания
Цикл while для непрерывного затухания в Режиме затухания
if-else для переключения режимов и обнаружения длительного нажатия


Упражнение 2: Двухкнопочный контроллер яркости PWM с динамическим диапазоном
Аппаратная часть:

Подключите два светодиода к ШИМ-пинам 5 и 6.
Подключите две кнопки к цифровым пинам 7 (увеличить яркость) и 8 (уменьшить яркость).

Задача:
Создайте программу, где две кнопки одновременно управляют яркостью обоих светодиодов. Используйте цикл while в void loop() для мониторинга состояния кнопок. При нажатии кнопки увеличения используйте цикл for для увеличения яркости обоих светодиодов от текущего значения до 255 шагами по 10 с задержкой 20мс на шаг. При нажатии кнопки уменьшения уменьшайте аналогично до 0.
Используйте if-else для ограничения яркости в пределах 0–255 и обработки одновременного нажатия кнопок (если обе нажаты, установите яркость 128 и пауза 1 секунда). После каждого изменения выводите текущее значение яркости в Serial Monitor через Serial.println().
Если кнопки не нажимаются 5 секунд (используя millis()), войдите в "демо-режим", где светодиоды чередуют затухание вверх-вниз (используя вложенные циклы for) до нажатия кнопки. Реализуйте защиту от дребезга для обеих кнопок.
Фокус программирования:

Цикл while для непрерывного мониторинга кнопок
Цикл for для плавных переходов яркости
if-else для проверки границ и обработки одновременного нажатия


Упражнение 3: Синхронизированная PWM-волна светодиодов с кнопочным управлением скоростью
Аппаратная часть:

Подключите два светодиода к ШИМ-пинам 10 и 11.
Подключите две кнопки к цифровым пинам 4 (ускорить) и 5 (замедлить).

Задача:
Создайте эффект "волны", где два светодиода затухают попеременно (когда LED1 яркий, LED2 тусклый, и наоборот). Используйте вложенные циклы for в цикле while: один светодиод затухает от 0 до 255, другой от 255 до 0 с переменной задержкой (изначально 30мс на шаг).
Используйте if-else для проверки нажатий кнопок: кнопка ускорения уменьшает задержку на 5мс (минимум 5мс), кнопка замедления увеличивает на 5мс (максимум 100мс). При одновременном нажатии обеих кнопок приостановите волну (заморозьте текущую яркость) до отпускания, затем возобновите.
Используйте millis() для тайм-аута: если кнопки не нажимаются 10 секунд, сбросьте задержку до 30мс и трижды мигните оба светодиода на полной яркости с помощью цикла for. Выводите текущее значение задержки в Serial Monitor через Serial.println(). Реализуйте защиту от дребезга для обеих кнопок.
Фокус программирования:

Вложенные циклы for для синхронизированного затухания
Цикл while для непрерывного эффекта волны
if-else для управления скоростью кнопками и логики паузы


Технические замечания по реализации:
Пины ШИМ:
Убедитесь, что светодиоды подключены к ШИМ-совместимым пинам Arduino Uno: 3, 5, 6, 9, 10, 11 для функции analogWrite().
Защита от дребезга кнопок:
Добавьте задержку 50мс после каждого чтения кнопки или используйте метод защиты на основе millis() для предотвращения ложных срабатываний.
Serial вывод:
Инициализируйте Serial в void setup() командой Serial.begin(9600) для всех упражнений для возможности Serial.println().
Тестирование:
Протестируйте каждое упражнение на реальном Arduino Uno для проверки поведения PWM (плавное затухание) и отзывчивости кнопок.


Скопируйте этот Markdown в файл README.md на GitHub. Для лучшего отображения добавьте изображения схем подключения и GIF-анимации работы упражнений в папку images/ и ссылайтесь на них в Markdown:
